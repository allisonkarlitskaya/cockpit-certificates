#!/usr/bin/python3
# Run this with --help to see available options for tracing and debugging
# See https://github.com/cockpit-project/cockpit/blob/master/test/common/testlib.py
# "class Browser" and "class MachineCase" for the available API.

import os
import sys
import datetime

# import Cockpit's machinery for test VMs and its browser test API
TEST_DIR = os.path.dirname(__file__)
sys.path.append(os.path.join(TEST_DIR, "common"))
sys.path.append(os.path.join(os.path.dirname(TEST_DIR), "bots/machine"))
import testlib


class TestApplication(testlib.MachineCase):
    def testEmptyState(self):
        b = self.browser
        m = self.machine

        # Check service was started automatically when when first entering certficates page
        m.execute("systemctl stop certmonger.service")

        self.login_and_go("/certificates")

        b.wait_not_present(".pf-c-empty-state")
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check Empty State is present if service was stopped when certificates page is open
        m.execute("systemctl stop certmonger.service")
        b.wait_in_text(".pf-c-empty-state h1", "The certificate service is not active")

        # Check Starting service from UI works
        b.click(".pf-c-empty-state button:contains(Start the certificate service)")

        b.wait_not_present(".pf-c-empty-state")
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check check stopping and starting UI from command line reflects state of UI
        m.execute("systemctl stop certmonger.service")
        b.wait_in_text(".pf-c-empty-state h1", "The certificate service is not active")

        m.execute("systemctl start certmonger.service")
        b.wait_not_present(".pf-c-empty-state")
        b.wait_in_text(".ct-table-header h3", "Certificates")

    def testNoCertificates(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/certificates")
        # verify expected heading
        b.wait_in_text(".ct-table-header h3", "Certificates")
        b.wait_in_text(".ct-table-empty tr td", "No certificate is tracked on this host")

    def testNssdbCert(self):
        b = self.browser
        m = self.machine

        next_year = datetime.datetime.now() + datetime.timedelta(days=365)
        next_year_str = next_year.strftime('%d/%m/%Y')

        cert_name = "Server-Cert"
        db_path = "/etc/pki/nssdb"
        m.execute("selfsign-getcert request -d {0} -n {1}".format(db_path, cert_name))

        self.login_and_go("/certificates")
        # Verify expected heading
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check cert header
        b.wait_in_text("#certificate-0-name", cert_name)
        b.wait_in_text("#certificate-0-validity", "Auto-renews before {0}".format(next_year_str))
        b.wait_in_text("#certificate-0-ca", "SelfSign")

        b.click("button#expandable-toggle0")
        # Check General tab
        b.wait_in_text("#certificate-0-general-status", "Monitoring")
        b.wait_in_text("#certificate-0-general-ca", "SelfSign")
        b.wait_in_text("#certificate-0-general-validity", " to {0}".format(next_year_str)) # TODO better date handling
        b.wait_in_text("#certificate-0-general-autorenewal", "Yes")

        b.click("#certificate-0-keys-tab")
        # Check Key tab
        b.wait_in_text("#certificate-0-key-nickname", cert_name)
        b.wait_in_text("#certificate-0-key-type", "RSA")
        b.wait_in_text("#certificate-0-key-token", "NSS Certificate DB")
        b.wait_in_text("#certificate-0-key-storage", "NSSDB")
        b.wait_in_text("#certificate-0-key-location", db_path)

        b.click("#certificate-0-cert-tab")
        # Check Cert tab
        b.wait_in_text("#certificate-0-cert-nickname", cert_name)
        b.wait_in_text("#certificate-0-cert-token", "NSS Certificate DB")
        b.wait_in_text("#certificate-0-cert-storage", "NSSDB")
        b.wait_in_text("#certificate-0-cert-location", db_path)

    def testFileCert(self):
        b = self.browser
        m = self.machine

        next_year = datetime.datetime.now() + datetime.timedelta(days=365)
        next_year_str = next_year.strftime('%d/%m/%Y')

        cert_path = "/tmp/myCert.cert"
        key_path = "/tmp/myKey.cert"
        m.execute("selfsign-getcert request -f {0} -k {1}".format(cert_path, key_path))

        self.login_and_go("/certificates")
        # Verify expected heading
        b.wait_in_text(".ct-table-header h3", "Certificates")

        # Check cert header
        b.wait_in_text("#certificate-0-validity", "Auto-renews before {0}".format(next_year_str))
        b.wait_in_text("#certificate-0-ca", "SelfSign")

        b.click("button#expandable-toggle0")
        # Check General tab
        b.wait_in_text("#certificate-0-general-status", "Monitoring")
        b.wait_in_text("#certificate-0-general-ca", "SelfSign")
        b.wait_in_text("#certificate-0-general-validity", " to {0}".format(next_year_str))
        b.wait_in_text("#certificate-0-general-autorenewal", "Yes")

        b.click("#certificate-0-keys-tab")
        # Check Key tab
        b.wait_in_text("#certificate-0-key-type", "RSA")
        b.wait_in_text("#certificate-0-key-storage", "FILE")
        b.wait_in_text("#certificate-0-key-location", key_path)

        b.click("#certificate-0-cert-tab")
        # Check Cert tab
        b.wait_in_text("#certificate-0-cert-storage", "FILE")
        b.wait_in_text("#certificate-0-cert-location", cert_path)

    def testRequestCert(self):
        b = self.browser
        m = self.machine

        self.login_and_go("/certificates")
        # verify expected heading
        b.wait_in_text(".ct-table-header h3", "Certificates")

        class RequestCertDialog(object):
            def __init__(
                self, test_obj, ca="SelfSign", storage_type="NSSDB", nickname="",
                key_path="", cert_path=""
            ):
                self.test_obj = test_obj
                self.ca = ca
                self.storage_type = storage_type
                self.nickname = nickname
                self.cert_path = cert_path
                self.key_path = key_path

            def execute(self):
                self.open()
                self.fill()
                self.create()
                self.verify_frontend()
                self.verify_backend()
                self.cleanup()

            def open(self):
                b.click("#request-certificate-action")
                b.wait_in_text(".modal-dialog .modal-header .modal-title", "Request Certificate")

            def fill(self):
                b.select_from_dropdown("#ca", self.ca)
                b.click(".pf-c-radio__input input + label:contains({0})".format(self.storage_type))

                if self.storage_type === "NSSDB":
                    b.set_input_text("#nickname", self.nickname)
                else:
                    b.set_input_text("#cert-file", self.cert_path)
                    b.set_input_text("#key-file", self.key_path)

            def cancel(self):
                b.click(".modal-footer button:contains(Cancel)")
                b.wait_not_present("#create-storage-pool-dialog")

            def create(self):
                b.click(".modal-footer button:contains(Request)")
                b.wait_not_present("#create-storage-pool-dialog")

            def verify_frontend(self):
                b.reload()
                b.enter_page('/certificates')
                b.wait_in_text(".ct-table-header h3", "Certificates")

                b.click("button#expandable-toggle0")
                if self.storage_type == "NSSDB":
                    if self.nickname:
                        b.wait_in_text("#certificate-0-name", self.nickname)
                        b.click("#certificate-0-cert-tab")
                        b.wait_in_text("#certificate-0-cert-storage", "NSSDB")
                        b.click("#certificate-0-keys-tab")
                        b.wait_in_text("#certificate-0-keys-storage", "NSSDB")
                else:
                    if self.key_path:
                        b.click("#certificate-0-keys-tab")
                        b.wait_in_text("#certificate-0-key-location", self.key_path)
                    if self.cert_path:
                        b.click("#certificate-0-cert-tab")
                        b.wait_in_text("#certificate-0-cert-location", self.cert_path)

            def verify_backend(self):
                if self.storage_type == "NSSDB":
                    command_output = m.execute("selfsign-getcert list -d /etc/pki/nsddb -b {0}".format(self.nickname))
                    command_output = m.execute("selfsign-getcert list -d /etc/pki/nsddb -b {0} | grep 'key pair storage:' | awk '{print $4}'".format(self.nickname))
                    self.assertEqual(command_output, "type=NSSDB,location='/etc/pki/nssdb',nickname='{0}',token='NSS".format(self.nickname)
                    command_output = m.execute("selfsign-getcert list -d /etc/pki/nsddb -b {0} | grep 'certificate:' | awk '{print $2}'".format(self.nickname))
                    self.assertEqual(command_output, "type=NSSDB,location='/etc/pki/nssdb',nickname='{0}',token='NSS".format(self.nickname)
                else:
                    command_output = m.execute("selfsign-getcert list -f {0} | grep 'key pair storage:' | awk '{print $4}'".format(self.cert_path))
                    self.assertEqual(command_output, "type=FILE,location='{0}'".format(self.key_path)
                    command_output = m.execute("selfsign-getcert list -f {0} | grep 'certificate:' | awk '{print $2}'".format(self.cert_path))
                    self.assertEqual(command_output, "type=FILE,location='{0}'".format(self.cert_path)

            def cleanup(self):
                if self.storage_type == "NSSDB":
                    m.execute("selfsign-getcert stop-tracking -d /etc/pki/nssdb -n {0}".format(self.nickname))
                else:
                    m.execute("selfsign-getcert stop-tracking -f {0} -k {1}".format(cert_path, key_path))

        # Test various forward Modes
        RequestCertDialog(
            self,
            nickname="testcert1",
            storage_type="NSSDB",
        ).execute()

        # Test various forward Modes
        RequestCertDialog(
            self,
            cert_path="/tmp/testcert2.cert",
            key_path="/tmp/testkey2.key",
            storage_type="FILE",
        ).execute()



if __name__ == '__main__':
    testlib.test_main()
