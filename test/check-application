#!/usr/bin/python3
# Run this with --help to see available options for tracing and debugging
# See https://github.com/cockpit-project/cockpit/blob/master/test/common/testlib.py
# "class Browser" and "class MachineCase" for the available API.

import os
import sys

# import Cockpit's machinery for test VMs and its browser test API
TEST_DIR = os.path.dirname(__file__)
sys.path.append(os.path.join(TEST_DIR, "common"))
sys.path.append(os.path.join(os.path.dirname(TEST_DIR), "bots/machine"))
import testlib


class TestApplication(testlib.MachineCase):
    def createCertificate(self, nickName):
        m = self.machine

        m.execute("selfsign-getcert request -d /etc/pki/nssdb -n {0}".format(nickName))

    def testEmptyState(self):
        b = self.browser
        m = self.machine

        # Check service was started automatically when when first entering certficates page
        m.execute("systemctl stop certmonger.service")

        self.login_and_go("/certificates")

        b.wait_not_present(".pf-c-empty-state")
        b.wait_text(".container-fluid h2", "Certificates")

        # Check Empty State is present if service was stopped when certificates page is open
        m.execute("systemctl stop certmonger.service")
        b.wait_text(".pf-c-empty-state h1", "The certificate service is not active")

        # Check Starting service from UI works
        b.click(".pf-c-empty-state button:contains(Start the certificate service)")

        b.wait_not_present(".pf-c-empty-state")
        b.wait_text(".container-fluid h2", "Certificates")

        # Check check stopping and starting UI from command line reflects state of UI
        m.execute("systemctl stop certmonger.service")
        b.wait_text(".pf-c-empty-state h1", "The certificate service is not active")

        m.execute("systemctl start certmonger.service")
        b.wait_not_present(".pf-c-empty-state")
        b.wait_text(".container-fluid h2", "Certificates")

    def testBasic(self):
        b = self.browser
        m = self.machine

        self.createCertificate("Server-Cert")

        self.login_and_go("/certificates")
        # verify expected heading
        b.wait_text(".container-fluid h2", "Certificates")


if __name__ == '__main__':
    testlib.test_main()
